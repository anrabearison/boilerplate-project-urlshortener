const validUrl = require('valid-url');
const Url = require('../models/Url');
const axios = require('axios');

class UrlService {
  constructor() {
    this.urlModel = Url;
  }

  // Method to validate if the URL is valid
  validateUrl(url) {
    return new Promise((resolve, reject) => {
      if (!validUrl.isWebUri(url)) {
        reject('Invalid URL format'); 
      }
  
      // Si l'URL est valide, on effectue la requête avec axios
      axios.get(url)
        .then((response) => {
          if (response.status === 200) {
            resolve(true); // L'URL fonctionne, on résout avec `true`
          } else {
            reject('URL unreachable'); // Rejette si le statut n'est pas 200
          }
        })
        .catch((error) => {
          reject('URL unreachable'); // Rejette si une erreur survient pendant la requête
        });
    });
  }
  
  // Method to generate a new shortened URL entry
  async shortenUrl(original_url) {
    const count = await this.urlModel.countDocuments();  // Count existing URLs
    const short_url = count + 1;

    const newUrl = new this.urlModel({ original_url, short_url });
    await newUrl.save();  // Save the new URL to the database
    return { original_url, short_url };
  }

  // Method to retrieve the original URL using the short URL
  async getOriginalUrl(short_url) {
    return await this.urlModel.findOne({ short_url });
  }
}

module.exports = UrlService;
